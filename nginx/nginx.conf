user  nginx;  # Define o usuário sob o qual o processo do Nginx será executado. Geralmente, é 'nginx', um usuário não privilegiado.

worker_processes 1;  # Define o número de processos de trabalho do Nginx. Neste caso, é definido como 1 processo.

error_log  /dev/stdout info;  # Define o arquivo de log de erros. Neste caso, ele é redirecionado para a saída padrão (stdout) com o nível de log definido como 'info'.

error_log off;  # Desativa o arquivo de log de erros.

pid        /var/run/nginx.pid;  # Define o local do arquivo PID (identificador de processo) do Nginx.

events {
    worker_connections  1024;  # Define o número máximo de conexões simultâneas por processo de trabalho.

    use epoll;  # Define o método de I/O para eventos. Neste caso, usa epoll, um método de I/O eficiente para sistemas Linux.

    multi_accept on;  # Permite que cada processo de trabalho aceite simultaneamente várias conexões. Isso pode melhorar o desempenho em sistemas com alto tráfego.
}

http {
    include       /etc/nginx/mime.types;  # Inclui o arquivo de tipos MIME padrão do Nginx.

    default_type  application/octet-stream;  # Define o tipo MIME padrão para ser usado quando o tipo não pode ser determinado.

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';  # Define o formato do log de acesso.

    access_log  /dev/stdout main;  # Define o arquivo de log de acesso. Neste caso, ele é redirecionado para a saída padrão (stdout).

    access_log off;  # Desativa o arquivo de log de acesso.

    keepalive_timeout 65;  # Define o tempo máximo de espera para uma conexão keep-alive.

    keepalive_requests 100000;  # Define o número máximo de solicitações permitidas em uma conexão keep-alive.

    tcp_nopush on;  # Ativa a diretiva TCP_NOPUSH, que permite o envio de cabeçalhos de resposta HTTP e corpo do arquivo em uma única operação.

    tcp_nodelay on;  # Ativa a diretiva TCP_NODELAY, que desativa o algoritmo Nagle, melhorando a latência para conexões TCP.

    server {
        listen 80;  # Define o servidor para ouvir na porta 80.

        proxy_pass_header Server;  # Define o cabeçalho a ser passado para o backend.

        location / {
            proxy_set_header Host $host;  # Define o cabeçalho 'Host' para o valor do host original da solicitação.
            proxy_set_header X-Real-IP $remote_addr;  # Define o cabeçalho 'X-Real-IP' para o endereço IP real do cliente.

            # Aponte para o nome do Serviço da Web (para rotear)
            proxy_pass http://flaskapp:8000/;  # Define o destino para encaminhar a solicitação HTTP. Neste caso, para o serviço Flask em 'flaskapp' na porta 8000.
        }
    }
}
